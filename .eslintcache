[{"E:\\Machstatz\\taskofmachstatz\\src\\index.js":"1","E:\\Machstatz\\taskofmachstatz\\src\\App.js":"2","E:\\Machstatz\\taskofmachstatz\\src\\componets\\Planet.js":"3","E:\\Machstatz\\taskofmachstatz\\src\\componets\\Favorite.js":"4","E:\\Machstatz\\taskofmachstatz\\src\\componets\\Contexpage.js":"5"},{"size":432,"mtime":1608718157514,"results":"6","hashOfConfig":"7"},{"size":2934,"mtime":1608880139199,"results":"8","hashOfConfig":"7"},{"size":8238,"mtime":1608875343154,"results":"9","hashOfConfig":"7"},{"size":5605,"mtime":1608875260865,"results":"10","hashOfConfig":"7"},{"size":88,"mtime":1608746303694,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"11vfq8b",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":1,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"E:\\Machstatz\\taskofmachstatz\\src\\index.js",[],["26","27"],"E:\\Machstatz\\taskofmachstatz\\src\\App.js",[],"E:\\Machstatz\\taskofmachstatz\\src\\componets\\Planet.js",["28","29","30","31","32"],"import axios from 'axios'\r\nimport React from 'react'\r\nimport {dataContext} from './Contexpage'\r\n\r\nimport {followCursor} from 'tippy.js';\r\nimport 'tippy.js/dist/tippy.css';\r\n\r\nimport Tippy from '@tippy.js/react';\r\nimport 'tippy.js/dist/tippy.css';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport Container from '@material-ui/core/Container';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\n\r\n//importing images from image file\r\nimport ceres from '../images/cares.jpg';\r\nimport earth from '../images/earth.jpg';\r\nimport eris from '../images/eris.jpg';\r\nimport haumea from '../images/haumea.jpg';\r\nimport jupiter from '../images/jupiter.jpg';\r\nimport makemake from '../images/makemake.jpg';\r\nimport mars from '../images/mars.png';\r\nimport mercury from '../images/mercury.jpg';\r\nimport pluto from '../images/pluto.png';\r\nimport saturn from '../images/saturn.jpg';\r\nimport venus from '../images/venus.jpg';\r\n\r\nimport { useSnackbar } from 'notistack';\r\n\r\n\r\n// importing useEffect hook , useState, useContext\r\nconst {useState, useEffect,useContext } = React\r\n\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      justifyContent:'space-evenly',\r\n      overflow: 'hidden',\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    root2:{\r\n        marginTop:theme.spacing(10),\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginTop:theme.spacing(13.5)\r\n          },\r\n        \r\n    },\r\n    gridList: {\r\n\r\n      flexWrap: 'wrap',\r\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n      transform: 'translateZ(0)',\r\n    },\r\n    title: {\r\n      color: theme.palette.secondary.light,\r\n    },\r\n    nameTitle:{\r\n      color: theme.palette.grey.light,\r\n    },\r\n    titleBar: {\r\n      background:\r\n        'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 20%, rgba(0,0,0,0) 100%)',\r\n    },\r\n\r\n  }));\r\n  \r\n\r\nconst Planet = ()=> {\r\n    const favoriteData = useContext(dataContext)\r\n\r\n    const classes = useStyles()\r\n    const {newdata,setnewdata} = useContext(dataContext)\r\n\r\n    const [planetDetails, setplanetDetails] = useState(null)\r\n    const initialState = {\r\n        ceres:ceres,\r\n        earth:earth,\r\n        eris:eris,\r\n        haumea:haumea,\r\n        jupiter:jupiter,\r\n        makemake:makemake,\r\n        mars:mars,\r\n        mercury:mercury,\r\n        pluto:pluto,\r\n        saturn:saturn,\r\n        venus:venus\r\n\r\n    }\r\n    const [drawerActivate, setdrawerActivate] = useState(false)\r\n    const [imagesSet, setimagesSet] = useState(initialState)\r\n    const [favirateClick, setfavirateClick] = useState({idStore:[],returnPlanet:[]})\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    //Doing API requests using axios third party module \r\n    useEffect(()=>{\r\n        setfavirateClick({...favirateClick,idStore:favoriteData.newdata.returnToHome})\r\n         axios.get('https://assignment-machstatz.herokuapp.com/planet')\r\n        .then(res=>\r\n            favoriteData.newdata.planetStore.length >=1 ?\r\n            // setplanetDetails(null):\r\n            setplanetDetails(favoriteData.newdata.planetStore):setplanetDetails(res.data)\r\n            )\r\n        .catch(err=>console.log(err))\r\n\r\n\r\n\r\n        if (window.innerWidth <= 600) {\r\n            setdrawerActivate(true);\r\n        }\r\n\r\n        window.addEventListener('resize', () => {\r\n            if (window.innerWidth <= 600) {\r\n                setdrawerActivate(true);\r\n            }\r\n            else {\r\n                setdrawerActivate(false);\r\n            }\r\n        });\r\n        setfavirateClick({...favirateClick,idStore:favoriteData.newdata.returnToHome,\r\n            returnPlanet:favoriteData.newdata.returnToplanetData})\r\n        if(favoriteData.newdata.planetStore===null || favoriteData.newdata.planetStore.length >=1 ){\r\n            setplanetDetails(favoriteData.newdata.planetStore)\r\n        }\r\n        // setnewdata({...newdata,planetStore:favoriteData.newdata.returnToplanetData,favoriteStore:favirateClick.idStore})\r\n\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        setnewdata({...newdata,favoriteStore:favirateClick.idStore,planetStore:planetDetails})\r\n        if(favoriteData.newdata.planetStore===null || favirateClick.returnPlanet.length>=1){\r\n            setnewdata({...newdata,planetStore:favirateClick.returnPlanet,favoriteStore:favirateClick.idStore})\r\n        }\r\n    },[favirateClick])\r\n  \r\n    if(planetDetails) {\r\n        for (var property in imagesSet) {\r\n            for(var eachItem of planetDetails){\r\n                if(eachItem.id === property){\r\n                    eachItem[\"image\"] =imagesSet[property]\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleFavirate =(id,variant)=>{\r\n\r\n        for (let each of planetDetails){\r\n            // if(each.id===id){\r\n                if(each.isFavourite !== true){\r\n                    if(each.id === id){\r\n                        each.isFavourite=true\r\n                    }\r\n                }\r\n            // }\r\n        }\r\n\r\n        setplanetDetails(planetDetails)\r\n        if(favirateClick.idStore.includes(id)){\r\n            const newidStore = favirateClick.idStore.filter(planet=>planet !== id)\r\n            setfavirateClick({...favirateClick,idStore:newidStore})\r\n            enqueueSnackbar('Removed from the Favorite', {variant} );\r\n            // for (let each of planetDetails){\r\n            //     if(each.id===id && !newidStore.includes(id)){\r\n            //         each.isFavourite=false\r\n            //     }\r\n            // }\r\n        }\r\n        else{\r\n            setfavirateClick({...favirateClick,idStore:[...favirateClick.idStore,id]})  \r\n            enqueueSnackbar('Added to the Fivorite',{ variant });\r\n        }\r\n           setnewdata({...newdata,planetStore:favirateClick.returnPlanet})\r\n    }\r\n    \r\n\r\n    return (\r\n        <div  className={classes.root}>\r\n\r\n        {/* <Container maxWidth=\"md\"> */}\r\n            {/* <Grid item xs={6}> */}\r\n            <div className={classes.root2}>\r\n        <GridList className={classes.gridList} cellHeight={drawerActivate ? 180:350}  cols={drawerActivate ? 2:3}>\r\n            {planetDetails ? planetDetails.map((tile) => (\r\n            <GridListTile key={tile.id} className=\"imagehover\">\r\n                <img src={tile.image} alt={tile.id}  />\r\n                <GridListTileBar\r\n                title={tile.name}\r\n                classes={{\r\n                    root: classes.titleBar,\r\n                    title: classes.nameTitle,\r\n                }}\r\n                actionIcon={\r\n                    <Tippy\r\n                        content={<span style={{color:\"#FF007F\"}} >Favorite</span>}\r\n                        arrow={true}\r\n                        animation=\"fade\"\r\n                        duration={0}\r\n                        delay={[100, 0]}\r\n                        followCursor={true} plugins={[followCursor]}\r\n                        // ...and many more!\r\n                        >\r\n                    <IconButton aria-label={`star ${tile.name}`} onClick={()=>handleFavirate(tile.id,\"success\")} >\r\n\r\n                    {/* {favoriteData.newdata.returnToHome ? \r\n                    favoriteData.newdata.returnToHome.includes(tile.id) ? \r\n                    <FavoriteIcon className={classes.title} /> \r\n                    :<FavoriteBorderIcon className={classes.title} />:null\r\n                    }    */}\r\n                    {tile.isFavourite && favirateClick.idStore.includes(tile.id) ? \r\n\r\n                    <FavoriteIcon className={classes.title} /> : <FavoriteBorderIcon className={classes.title} />}\r\n                    </IconButton>\r\n                    </Tippy>\r\n\r\n                }\r\n                />\r\n                </GridListTile>\r\n            )):null}\r\n        </GridList>\r\n        {/* </Grid> */}\r\n        {/* </Container> */}\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Planet;","E:\\Machstatz\\taskofmachstatz\\src\\componets\\Favorite.js",["33","34","35","36","37","38","39","40","41","42"],"import React,{useContext,useState} from 'react';\r\nimport {dataContext} from './Contexpage';\r\n\r\nimport axios from 'axios'\r\n\r\nimport { useSnackbar } from 'notistack';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport Container from '@material-ui/core/Container';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\n\r\nimport hello from '../images/hello.gif';\r\nimport seaching from '../images/seaching.gif';\r\nimport looking from '../images/looking.gif';\r\nimport galaxy from '../images/galaxy.jpg'\r\n\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      justifyContent:'space-evenly',\r\n      overflow: 'hidden',\r\n      backgroundColor: theme.palette.background.paper,\r\n    //   backgroundImage: `url(${ galaxy })`,\r\n    //   backgroundRepeat:'no-repeat',\r\n      \r\n    },\r\n    root2:{\r\n        marginTop:theme.spacing(10),\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginTop:theme.spacing(13.5)\r\n          },\r\n        \r\n    },\r\n\r\n    gridList: {\r\n      flexWrap: 'wrap',\r\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n      transform: 'translateZ(0)',\r\n    },\r\n    title: {\r\n      color: theme.palette.secondary.light,\r\n    },\r\n    titleBar: {\r\n      background:\r\n        'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n    },\r\n\r\n  }));\r\n\r\nexport default function Favorite() {\r\n    const [drawerActivate, setdrawerActivate] = useState(false)\r\n    const [favirateClick, setfavirateClick] = useState({idStore:[],newSetdata:[]})\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    const {newdata,setnewdata} = useContext(dataContext)\r\n\r\n  \r\n\r\n    const classes = useStyles()\r\n    \r\n    React.useEffect(()=>{\r\n       if (window.innerWidth <= 600) {\r\n           setdrawerActivate(true);\r\n       }\r\n\r\n       window.addEventListener('resize', () => {\r\n           if (window.innerWidth <= 600) {\r\n               setdrawerActivate(true);\r\n           }\r\n           else {\r\n               setdrawerActivate(false);\r\n           }\r\n       });\r\n    setfavirateClick({...favirateClick,idStore:favoriteData.newdata.favoriteStore,newSetdata:favoriteData.newdata.planetStore})\r\n    setnewdata({...newdata,returnToHome:favirateClick.idStore,returnToplanetData:favirateClick.newSetdata})\r\n\r\n   },[])\r\n   React.useEffect(()=>{\r\n    setnewdata({...newdata,returnToHome:favirateClick.idStore,returnToplanetData:favirateClick.newSetdata})\r\n},[favirateClick])\r\n\r\n   const handleFavirate =(id,warning)=>{\r\n    enqueueSnackbar('Removed from Favorite',{warning});\r\n\r\n    if(favoriteData.newdata.favoriteStore.includes(id)){\r\n        for (let each of favoriteData.newdata.planetStore){\r\n            if(each.id===id){\r\n                each.isFavourite=false\r\n            }\r\n        }\r\n    }else{\r\n        for (let each of favoriteData.newdata.planetStore){\r\n            if(each.id===id){\r\n                each.isFavourite=false\r\n            }\r\n        }\r\n    }\r\n   \r\n\r\n    if(favoriteData.newdata.favoriteStore.includes(id)){\r\n        const newidStore = favoriteData.newdata.favoriteStore.filter(planet=>planet !== id)\r\n        setfavirateClick({...favirateClick,idStore:newidStore})\r\n\r\n       \r\n    }\r\n    else{\r\n        setfavirateClick({...favirateClick,idStore:[...favirateClick.idStore,id]})  .\r\n        enqueueSnackbar('Added to Fivorite',{warning});\r\n\r\n    }\r\n       \r\n}\r\n\r\n\r\n    const favoriteData = useContext(dataContext)\r\n    return (\r\n        \r\n            <div  className={classes.root}>\r\n          \r\n\r\n          {/* <Container maxWidth=\"md\"> */}\r\n              {/* <Grid item xs={6}> */}\r\n              <div className={classes.root2}>\r\n          <GridList className={classes.gridList} cellHeight={drawerActivate ? 180:350}  cols={drawerActivate ? 2:3}>\r\n              {favoriteData.newdata.planetStore ? favoriteData.newdata.planetStore.map((tile) => (\r\n                   tile.isFavourite && favoriteData.newdata.favoriteStore.includes(tile.id) ?\r\n              <GridListTile key={tile.id} className=\"imagehover\">\r\n                  <img src={tile.image} alt={tile.id}  />\r\n                  <GridListTileBar\r\n                  title={tile.name}\r\n                  classes={{\r\n                      root: classes.titleBar,\r\n                      title: classes.title,\r\n                  }}\r\n                  actionIcon={\r\n                      <IconButton aria-label={`star ${tile.name}`} onClick={()=>handleFavirate(tile.id,\"warning\")}\r\n                        >\r\n                      {tile.isFavourite && favoriteData.newdata.favoriteStore.includes(tile.id) ? \r\n                      <FavoriteIcon className={classes.title} /> :null\r\n                      }  \r\n\r\n                      </IconButton>\r\n                  }\r\n                  />\r\n                  </GridListTile>:null\r\n              )): null}\r\n                                    {/* <h3>you don't have favorite</h3> */}\r\n            {favoriteData.newdata.favoriteStore.length>=1 ?\r\n                null\r\n            : <div>\r\n                <img src={seaching} alt={seaching} /> \r\n             </div>}\r\n\r\n\r\n          </GridList>\r\n          </div>\r\n          {/* </Grid> */}\r\n          {/* </Container> */}\r\n          </div>\r\n    )\r\n}\r\n",["43","44"],"E:\\Machstatz\\taskofmachstatz\\src\\componets\\Contexpage.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":15,"column":8,"nodeType":"51","messageId":"52","endLine":15,"endColumn":17},{"ruleId":"49","severity":1,"message":"53","line":97,"column":23,"nodeType":"51","messageId":"52","endLine":97,"endColumn":35},{"ruleId":"49","severity":1,"message":"54","line":99,"column":30,"nodeType":"51","messageId":"52","endLine":99,"endColumn":43},{"ruleId":"55","severity":1,"message":"56","line":133,"column":7,"nodeType":"57","endLine":133,"endColumn":9,"suggestions":"58"},{"ruleId":"55","severity":1,"message":"59","line":140,"column":7,"nodeType":"57","endLine":140,"endColumn":22,"suggestions":"60"},{"ruleId":"49","severity":1,"message":"61","line":4,"column":8,"nodeType":"51","messageId":"52","endLine":4,"endColumn":13},{"ruleId":"49","severity":1,"message":"50","line":12,"column":8,"nodeType":"51","messageId":"52","endLine":12,"endColumn":17},{"ruleId":"49","severity":1,"message":"62","line":15,"column":8,"nodeType":"51","messageId":"52","endLine":15,"endColumn":26},{"ruleId":"49","severity":1,"message":"63","line":17,"column":8,"nodeType":"51","messageId":"52","endLine":17,"endColumn":13},{"ruleId":"49","severity":1,"message":"64","line":19,"column":8,"nodeType":"51","messageId":"52","endLine":19,"endColumn":15},{"ruleId":"49","severity":1,"message":"65","line":20,"column":8,"nodeType":"51","messageId":"52","endLine":20,"endColumn":14},{"ruleId":"49","severity":1,"message":"54","line":60,"column":30,"nodeType":"51","messageId":"52","endLine":60,"endColumn":43},{"ruleId":"55","severity":1,"message":"66","line":84,"column":6,"nodeType":"57","endLine":84,"endColumn":8,"suggestions":"67"},{"ruleId":"55","severity":1,"message":"68","line":87,"column":3,"nodeType":"57","endLine":87,"endColumn":18,"suggestions":"69"},{"ruleId":"70","severity":1,"message":"71","line":114,"column":85,"nodeType":"72","messageId":"73","endLine":114,"endColumn":86,"fix":"74"},{"ruleId":"45","replacedBy":"75"},{"ruleId":"47","replacedBy":"76"},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'setimagesSet' is assigned a value but never used.","'closeSnackbar' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'favirateClick', 'favoriteData.newdata.planetStore', 'favoriteData.newdata.returnToHome', and 'favoriteData.newdata.returnToplanetData'. Either include them or remove the dependency array. You can also do a functional update 'setfavirateClick(f => ...)' if you only need 'favirateClick' in the 'setfavirateClick' call.","ArrayExpression",["79"],"React Hook useEffect has missing dependencies: 'favoriteData.newdata.planetStore', 'newdata', 'planetDetails', and 'setnewdata'. Either include them or remove the dependency array.",["80"],"'axios' is defined but never used.","'FavoriteBorderIcon' is defined but never used.","'hello' is defined but never used.","'looking' is defined but never used.","'galaxy' is defined but never used.","React Hook React.useEffect has missing dependencies: 'favirateClick', 'favoriteData.newdata.favoriteStore', 'favoriteData.newdata.planetStore', 'newdata', and 'setnewdata'. Either include them or remove the dependency array. You can also do a functional update 'setfavirateClick(f => ...)' if you only need 'favirateClick' in the 'setfavirateClick' call.",["81"],"React Hook React.useEffect has missing dependencies: 'newdata' and 'setnewdata'. Either include them or remove the dependency array.",["82"],"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"83","text":"84"},["77"],["78"],"no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},[3684,3695],"\r\n        .","Update the dependencies array to be: [favirateClick, favoriteData.newdata.planetStore, favoriteData.newdata.returnToHome, favoriteData.newdata.returnToplanetData]",{"range":"93","text":"94"},"Update the dependencies array to be: [favirateClick, favoriteData.newdata.planetStore, newdata, planetDetails, setnewdata]",{"range":"95","text":"96"},"Update the dependencies array to be: [favirateClick, favoriteData.newdata.favoriteStore, favoriteData.newdata.planetStore, newdata, setnewdata]",{"range":"97","text":"98"},"Update the dependencies array to be: [favirateClick, newdata, setnewdata]",{"range":"99","text":"100"},[4388,4390],"[favirateClick, favoriteData.newdata.planetStore, favoriteData.newdata.returnToHome, favoriteData.newdata.returnToplanetData]",[4736,4751],"[favirateClick, favoriteData.newdata.planetStore, newdata, planetDetails, setnewdata]",[2692,2694],"[favirateClick, favoriteData.newdata.favoriteStore, favoriteData.newdata.planetStore, newdata, setnewdata]",[2834,2849],"[favirateClick, newdata, setnewdata]"]